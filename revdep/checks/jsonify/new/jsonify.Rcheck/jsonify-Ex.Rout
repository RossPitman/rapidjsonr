
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jsonify"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jsonify')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.json")
> ### * as.json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.json
> ### Title: Coerce string to JSON
> ### Aliases: as.json
> 
> ### ** Examples
> 
> 
> js <- '{"x":1,"y":2}'
> as.json(js)
{"x":1,"y":2}> 
> 
> 
> 
> cleanEx()
> nameEx("from_json")
> ### * from_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: from_json
> ### Title: From JSON
> ### Aliases: from_json
> 
> ### ** Examples
> 
> 
> from_json('{"a":[1, 2, 3]}')
$a
[1] 1 2 3

> from_json('{"a":8, "b":99.5, "c":true, "d":"cats", "e":[1, "cats", 3]}')
$a
[1] 8

$b
[1] 99.5

$c
[1] TRUE

$d
[1] "cats"

$e
[1] "1"    "cats" "3"   

> from_json('{"a":8, "b":{"c":123, "d":{"e":456}}}')
$a
[1] 8

$b
$b$c
[1] 123

$b$d
$b$d$e
[1] 456



> 
> lst <- list("a" = 5L, "b" = 1.43, "c" = "cats", "d" = FALSE)
> js <- jsonify::to_json(lst, unbox = TRUE)
> from_json( js )
$a
[1] 5

$b
[1] 1.43

$c
[1] "cats"

$d
[1] FALSE

> 
> ## Return a data frame
> from_json('[{"id":1,"val":"a"},{"id":2,"val":"b"}]')
  id val
1  1   a
2  2   b
> 
> ## Return a data frame with a list column
> from_json('[{"id":1,"val":"a"},{"id":2,"val":["b","c"]}]')
  id  val
1  1    a
2  2 b, c
> 
> ## Without simplifying to a data.frame
> from_json('[{"id":1,"val":"a"},{"id":2,"val":["b","c"]}]', simplify = FALSE )
[[1]]
[[1]]$id
[1] 1

[[1]]$val
[1] "a"


[[2]]
[[2]]$id
[1] 2

[[2]]$val
[[2]]$val[[1]]
[1] "b"

[[2]]$val[[2]]
[1] "c"



> 
> ## Missing JSON keys 
> from_json('[{"x":1},{"x":2,"y":"hello"}]')
[[1]]
[[1]]$x
[1] 1


[[2]]
[[2]]$x
[1] 2

[[2]]$y
[1] "hello"


> 
> ## Missing JSON keys - filling with NAs
> from_json('[{"x":1},{"x":2,"y":"hello"}]', fill_na = TRUE )
  x     y
1 1  <NA>
2 2 hello
> 
> ## Duplicate object keys
> from_json('[{"x":1,"x":"a"},{"x":2,"x":"b"}]')
  x
1 1
2 2
> 
> from_json('[{"id":1,"val":"a","val":1},{"id":2,"val":"b"}]', fill_na = TRUE )
  id val
1  1   a
2  2   b
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("minify_json")
> ### * minify_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: minify_json
> ### Title: Minify Json
> ### Aliases: minify_json
> 
> ### ** Examples
> 
> 
> df <- data.frame(id = 1:10, val = rnorm(10))
> js <- to_json( df )
> jsp <- pretty_json(js)
> minify_json( jsp )
[{"id":1,"val":-0.6264538107423324},{"id":2,"val":0.18364332422208225},{"id":3,"val":-0.8356286124100472},{"id":4,"val":1.5952808021377916},{"id":5,"val":0.3295077718153605},{"id":6,"val":-0.8204683841180153},{"id":7,"val":0.4874290524284853},{"id":8,"val":0.7383247051292173},{"id":9,"val":0.5757813516534923},{"id":10,"val":-0.305388387156356}]> 
> 
> 
> 
> cleanEx()
> nameEx("pretty_json")
> ### * pretty_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_json
> ### Title: Pretty Json
> ### Aliases: pretty_json
> 
> ### ** Examples
> 
> 
> df <- data.frame(id = 1:10, val = rnorm(10))
> js <- to_json( df )
> pretty_json(js)
[
    {
        "id": 1,
        "val": -0.6264538107423324
    },
    {
        "id": 2,
        "val": 0.18364332422208225
    },
    {
        "id": 3,
        "val": -0.8356286124100472
    },
    {
        "id": 4,
        "val": 1.5952808021377916
    },
    {
        "id": 5,
        "val": 0.3295077718153605
    },
    {
        "id": 6,
        "val": -0.8204683841180153
    },
    {
        "id": 7,
        "val": 0.4874290524284853
    },
    {
        "id": 8,
        "val": 0.7383247051292173
    },
    {
        "id": 9,
        "val": 0.5757813516534923
    },
    {
        "id": 10,
        "val": -0.305388387156356
    }
]> 
> ## can also use directly on an R object
> pretty_json( df )
[
    {
        "id": 1,
        "val": -0.6264538107423324
    },
    {
        "id": 2,
        "val": 0.18364332422208225
    },
    {
        "id": 3,
        "val": -0.8356286124100472
    },
    {
        "id": 4,
        "val": 1.5952808021377916
    },
    {
        "id": 5,
        "val": 0.3295077718153605
    },
    {
        "id": 6,
        "val": -0.8204683841180153
    },
    {
        "id": 7,
        "val": 0.4874290524284853
    },
    {
        "id": 8,
        "val": 0.7383247051292173
    },
    {
        "id": 9,
        "val": 0.5757813516534923
    },
    {
        "id": 10,
        "val": -0.305388387156356
    }
]> 
> 
> 
> 
> cleanEx()
> nameEx("to_json")
> ### * to_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to_json
> ### Title: To JSON
> ### Aliases: to_json
> 
> ### ** Examples
> 
> 
> to_json(1:3)
[1,2,3]> to_json(letters[1:3])
["a","b","c"]> to_json(data.frame(x = 1:3, y = letters[1:3]))
[{"x":1,"y":"a"},{"x":2,"y":"b"},{"x":3,"y":"c"}]> to_json(list(x = 1:3, y = list(z = letters[1:3])))
{"x":[1,2,3],"y":{"z":["a","b","c"]}}> to_json(seq(as.Date("2018-01-01"), as.Date("2018-01-05"), length.out = 5))
[17532,17533,17534,17535,17536]> to_json(seq(as.Date("2018-01-01"), as.Date("2018-01-05"), length.out = 5), numeric_dates = FALSE)
["2018-01-01","2018-01-02","2018-01-03","2018-01-04","2018-01-05"]> 
> psx <- seq(
+   as.POSIXct("2018-01-01", tz = "Australia/Melbourne"), 
+   as.POSIXct("2018-02-01", tz = "Australia/Melbourne"), 
+   length.out = 5
+   )
> to_json(psx)
[1514725200,1515394800,1516064400,1516734000,1517403600]> to_json(psx, numeric_dates = FALSE)
["2017-12-31T13:00:00","2018-01-08T07:00:00","2018-01-16T01:00:00","2018-01-23T19:00:00","2018-01-31T13:00:00"]> 
> ## unbox single-value arrays
> to_json(list(x = 1), unbox = TRUE)
{"x":1.0}> to_json(list(x = 1, y = c("a"), z = list(x = 2, y = c("b"))), unbox = TRUE)
{"x":1.0,"y":"a","z":{"x":2.0,"y":"b"}}> 
> ## rounding numbers using the digits argument
> to_json(1.23456789, digits = 2)
[1.23]> df <- data.frame(x = 1L:3L, y = rnorm(3), z = letters[1:3])
> to_json(df, digits = 0 )
[{"x":1,"y":-1.0,"z":"a"},{"x":2,"y":0.0,"z":"b"},{"x":3,"y":-1.0,"z":"c"}]> 
> ## keeping factors
> to_json(df, digits = 2, factors_as_string = FALSE )
[{"x":1,"y":-0.63,"z":1},{"x":2,"y":0.18,"z":2},{"x":3,"y":-0.84,"z":3}]> 
> 
> 
> 
> 
> cleanEx()
> nameEx("validate_json")
> ### * validate_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validate_json
> ### Title: validate JSON
> ### Aliases: validate_json
> 
> ### ** Examples
> 
> 
> validate_json('[]')
[1] TRUE
> df <- data.frame(id = 1:5, val = letters[1:5])
> validate_json( to_json(df) )
[1] TRUE
> 
> validate_json('{"x":1,"y":2,"z":"a"}')
[1] TRUE
> 
> validate_json( c('{"x":1,"y":2,"z":"a"}', to_json(df) ) )
[1] TRUE TRUE
> validate_json( c('{"x":1,"y":2,"z":a}', to_json(df) ) )
[1] FALSE  TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.149 0 0.15 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
